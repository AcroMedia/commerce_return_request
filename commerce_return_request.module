<?php

/**
 * @file
 * Main module file that includes hooks and other implementations.
 */

/**
 * Implements hook_menu().
 */
function commerce_return_request_menu() {
  $items = array();
  $items['admin/commerce/config/return-request-settings'] = array(
    'title' => 'Return Request Settings',
    'description' => 'Configure which product types, line item types, and 
                      webforms the return request module uses.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crr_settings_page'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/orders/%commerce_order/return/%commerce_line_item'] = array(
    'page callback' => 'ccr_return_li_form_view',
    'page arguments' => array(1,3,5),
    'type' => MENU_CALLBACK,
    'access callback' => 'commerce_order_customer_order_view_access',
    'access arguments' => array(3),
  );
  $items['user/%user/orders/%commerce_order/return/submission/%'] = array(
    'page callback' => 'ccr_return_li_form_submission',
    'page arguments' => array(6),
    'type' => MENU_CALLBACK,
    'access callback' => 'commerce_order_customer_order_view_access',
    'access arguments' => array(3),
  );

  return $items;
}

/**
 * Provides an admin form for updating various settings.
 *
 * @param array $form
 *   The static form array that we are creating.
 * @param array $form_state
 *   The state of the form array (changes when form is submitted).
 *
 * @return array
 *   Returns the final $form array completely built, ready for rendering.
 */
function crr_settings_page($form, &$form_state) {
  $form = array();

  // Support either version 3 or 4 of webform.
  $webform_info = system_get_info('module','webform');

  // Turn 7.x-3.14 into 3 or 7.x-4.11 into 4.
  $webform_version = array_shift(explode('.',array_pop(explode('-',$webform_info['version']))));

  if ($webform_version > 2) {
    if ($webform_version == 3) {
      $bundles = webform_variable_get('webform_node_types');
    }
    elseif ($webform_version > 3) {
      $bundles = webform_node_types();
    }

    // Select a webform
    $form['commerce_return_request_li_form'] = array(
      '#type' => 'entityreference',
      '#title' => t('Select a form to display when returning an item.'),
      '#description' => t('You may select only one webform.'),
      '#required' => TRUE,
      '#default_value' => variable_get('commerce_return_request_li_form', NULL),
      '#era_entity_type' => 'node',  // Mandatory.
      '#era_bundles' => $bundles, // Optional (Any bundle by default).
      '#era_query_settings' => array(
        'limit' => 25, // Default is 50.
      ),
    );
  } else {
    $form['commerce_return_request_li_form'] = array(
      '#markup' => t('Error. Webform\'s version is not compatible. Consider 
                      upgrading!'),
    );
  }
  
  // Advanced settings.
  $form['crr_advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Returnable Settings'),
    '#collapsible' => TRUE,
  );

  $product_types = array();
  foreach (commerce_product_types() as $type => $product_type) {
    $product_types[$type] = $product_type['name'];
  }

  $form['crr_advanced']['commerce_return_request_prod_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Product Types that can be returned.'),
    '#options' => $product_types,
    '#default_value' => variable_get('commerce_return_request_prod_type', NULL),
    '#multiple' => TRUE,
  );

  $line_item_types = array();
  foreach (commerce_line_item_types() as $type => $line_item_type) {
    $line_item_types[$type] = $line_item_type['name'];
  }

  $form['crr_advanced']['commerce_return_request_li_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Line Item Types that can be returned.'),
    '#options' => $line_item_types,
    '#default_value' => variable_get('commerce_return_request_li_type', NULL),
    '#multiple' => TRUE,
  );

  $order_statuses = array();
  foreach (commerce_order_statuses() as $name => $status) {
    $order_statuses[$name] = ucfirst($status['state']) . ': ' . $status['title'];
  }
  asort($order_statuses);

  $form['crr_advanced']['commerce_return_request_order_statuses'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Order Statuses that can be returned.'),
    '#options' => $order_statuses,
    '#default_value' => variable_get('commerce_return_request_order_statuses', NULL),
    '#multiple' => TRUE,
  );


  return system_settings_form($form);
}

/**
 * Page callback for rendering a webform on a user account page.
 *
 * @return array
 *   An array as expected by drupal_render().
 */
function ccr_return_li_form_view() {
  $line_item_form = variable_get("commerce_return_request_li_form");
  $line_item_form_obj = node_load($line_item_form['entity_id']);
  return node_view($line_item_form_obj);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function commerce_return_request_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  $form_id_nid = array_pop(explode("_",$form_id));
  $form_line_item = variable_get('commerce_return_request_li_form');
  if ($form_id_nid == $form_line_item['entity_id']) {
    // If we are on the user account page, utilize page args (& verify them).
    $args = arg();
    if ($args[0] == "user" && $args[2] == "orders" && $args[4] == "return") {
      $user = user_load(intval($args[1]));
      $order = commerce_order_load(intval($args[3]));
      $line_item = commerce_line_item_load(intval($args[5]));

      if (_crr_can_be_returned($order, $line_item)) {
        // See if return on this line item already exists.
        $sids = _crr_lineitem_submission($line_item->line_item_id);
        if (count($sids) > 0) {
          $sid = $sids[0];
          $message = t('This product has a request that was <a href="@url">already submitted</a>.',
                        array("@url"=>"submission/" . $sid));
          $form['warning'] = array(
            "#markup" => '<div class="messages warning">' . $message . '</div>',
            '#weight' => -9999,
          );
        } 
        else {
          dpm($form);

          // Submit form on behalf of the Order owner and not the user.
          $form['details']['uid']['#value'] = $args[1];
        }
      }
    }
  }
}

/**
 *
 */
function ccr_return_li_form_submission($sid) {
  module_load_include('inc', 'webform', 'includes/webform.components');
  $form_line_item = variable_get('commerce_return_request_li_form');
  $node = node_load($form_line_item['entity_id']);
  $submission = webform_menu_submission_load($sid, $node->id);
  $render_array = webform_submission_page($node, $submission, "display");
  unset($render_array['#submission_navigation']);
  return $render_array;
}

/**
 * Looks for a submission on this line item.
 *
 * @param int $line_item_id
 *   Simple identifier of the line item.
 *
 * @return array
 */
function _crr_lineitem_submission($line_item_id) {
  $sids = db_select('commerce_return_request_submission', 'crr')
    ->fields('crr', array('crr_id'))
    ->condition('line_item_id', $line_item_id)
    ->execute()
    ->fetchCol();
  return $sids;
}

/**
 * Enforces the return settings.
 *
 * @param object $order
 *   Full Commerce Order object.
 * @param object $line_item
 *   Full Commerce Line Item.
 *
 * @return bool
 */
function _crr_can_be_returned($order, $line_item) {
  $allowed_status = variable_get('commerce_return_request_order_statuses');

  // Step 1) Determine if order is in the right status
  if (in_array($order->status, $allowed_status)) {

    // Step 2) Determine if line item is can be returned.
    $allowed_li_types = variable_get('commerce_return_request_li_type');
    if (in_array($line_item->type, $allowed_li_types)) {

      // Step 3) Determine if product type is allowed to be returnable.
      // @todo Make this product id location more stable.
      // @todo Use entity meta data wrappers.
      $product = commerce_product_load($line_item->commerce_product['und'][0]['product_id']);
      $allowed_prod_types = variable_get('commerce_return_request_prod_type');
      if (in_array($product->type, $allowed_prod_types)) {

        // Step 4) Return true
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function commerce_return_request_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_return_request') . '/includes/views',
  );
}
